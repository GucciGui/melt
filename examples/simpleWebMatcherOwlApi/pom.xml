<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
    <artifactId>simpleWebMatcherOwlApi</artifactId><!-- id used as the docker image name -->
    <packaging>jar</packaging>
    <version>1.0</version><!-- version appearing in the docker image name -->
    <description>Demo matcher with melt packaging</description>
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <oaei.mainClass>de.uni_mannheim.informatik.dws.melt.demomatcher.SimpleStringMatcher</oaei.mainClass><!-- mandatory: this class has to implement IOntologyMatchingToolBridge -->
        
        <maven.deploy.skip>true</maven.deploy.skip><!-- needed to call mvn deploy without having a distributionManagement -->
        <matching.version>3.2</matching.version> <!-- version for all matching related packages -->
    </properties>
    
    <!-- Accessing the resources:
    - all files in "oaei-resources" folder are stored in the current working directory and can be accessed with 
          Files.readAllLines(Paths.get("oaei-resources", "configuration_oaei.txt"));
    - all files in "src/main/resources" folder are compiled to the resulting jar and can be accessed with
          getClass().getClassLoader().getResourceAsStream("configuration_jar.txt");
    -->
    
    <dependencies>
        <!-- dependency for jena matchers - for other matchers you can replace it with artifactId: matching-base -->
        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>matching-owlapi</artifactId>
            <version>${matching.version}</version>
        </dependency>

        <!-- This dependency is necessary for web submission. It contains the server wrapper. -->
        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>receiver-http</artifactId>
            <version>${matching.version}</version>
        </dependency>

        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>matching-eval</artifactId>
            <version>${matching.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.docker-java</groupId>
            <artifactId>docker-java-core</artifactId>
            <version>3.2.7</version><!--maybe update version-->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.docker-java</groupId>
            <artifactId>docker-java-transport-httpclient5</artifactId>
            <version>3.2.7</version><!--maybe update version-->
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.25</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- the following plugin will generate a docker image and save it into the target folder -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.36.0</version>
                <configuration>
                    <!-- further machine configuration options: https://dmp.fabric8.io/#docker-machine
                         Use the following line in case you have installed docker on windows or mac
                    <machine><name>default</name></machine>
                    -->
                    <images>
                        <image>
                            <name>%a-%v-web</name>
                            <build>
                                <from>openjdk:8-jre-alpine</from><!--change it to a docker base image you want - this is just a small image which contains java-->
                                <assembly><descriptorRef>web</descriptorRef></assembly>
                                <cmd><shell>java -cp "${project.build.finalName}.${project.packaging}:lib/*" de.uni_mannheim.informatik.dws.melt.receiver_http.Main</shell></cmd>
                                <workdir>/maven</workdir>
                                <ports><port>8080</port></ports><!--port exposure to specify on which port the server runs -->
                            </build>
                        </image>
                    </images>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
                        <artifactId>matching-assembly</artifactId>
                        <version>${matching.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                            <goal>save</goal>
                        </goals>
                        <!--execute build and save when calling "mvn install" -->
                        <phase>package</phase>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
